import subprocess
import psutil
import time
import os
import threading
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from datetime import datetime

# ========================
# Logging Setup
# ========================
LOG_FILE = "malware_log.txt"


def log_event(event):
    with open(LOG_FILE, "a") as f:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        f.write(f"[{timestamp}] {event}\n")
    print(event)


# ========================
# File Monitoring
# ========================
class FileMonitor(FileSystemEventHandler):
    def on_created(self, event):
        log_event(f"[+] File Created: {event.src_path}")

    def on_deleted(self, event):
        log_event(f"[-] File Deleted: {event.src_path}")


def start_file_monitor(path="."):
    event_handler = FileMonitor()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()
    return observer


# ========================
# Process Monitoring
# ========================
def monitor_processes(running_flag):
    seen = set(p.pid for p in psutil.process_iter())
    while running_flag[0]:
        current = set(p.pid for p in psutil.process_iter())
        new_procs = current - seen
        for pid in new_procs:
            try:
                p = psutil.Process(pid)
                log_event(f"[+] New Process: {p.name()} (PID: {pid})")
            except psutil.NoSuchProcess:
                continue
        seen = current
        time.sleep(1)


# ========================
# Execute Sample
# ========================
def run_sample(file_path):
    log_event(f"[!] Executing sample: {file_path}")
    subprocess.Popen(["python", file_path])


# ========================
# Main Runner
# ========================
def main():
    sample_file = "dummy_malware.py"

    if not os.path.exists(sample_file):
        log_event("[X] Sample file not found!")
        return

    running_flag = [True]

    # Start monitoring
    observer = start_file_monitor()
    process_thread = threading.Thread(target=monitor_processes, args=(running_flag,))
    process_thread.start()

    # Execute sample
    run_sample(sample_file)

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        log_event("[!] Stopping analysis...")
        running_flag[0] = False
        observer.stop()

    observer.join()
    process_thread.join()
    log_event("[âœ”] Analysis complete. Log saved to malware_log.txt")


if __name__ == "__main__":
    main()
